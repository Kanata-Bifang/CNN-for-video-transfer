import argparse

def get_options():
    parser = argparse.ArgumentParser('pytorch artistic video')
    parser.add_argument('--name', required=True)
    parser.add_argument('--dataroot', required=True, help='Training dataset')
    parser.add_argument('--model', default='videonet', help='Network model')
    parser.add_argument('--loss', default='feature', help='Type of loss function')
    parser.add_argument('--transformer', default='skip', help='Transformer network')
    parser.add_argument('--style_image', default='style.jpg', help='Reference image used in training')
    parser.add_argument('--lambda_content', default=1e5, type=float)
    parser.add_argument('--lambda_style', default=1e11, type=float)
    parser.add_argument('--lambda_tv', default=1e2, type=float)
    parser.add_argument('--lambda_temp_o', default=2e3, type=float)
    parser.add_argument('--lambda_temp_f', default=1e7, type=float)
    parser.add_argument('--dataset_mode', default='video', help='Type of dataset')
    parser.add_argument('--load_model', action='store_true', help='Load existed model')
    parser.add_argument('--load_epoch', type=str, default='latest', help='Epoch to load')
    parser.add_argument('--epoch_count', type=int, default=1, help='Start epoch')
    parser.add_argument('--learning_rate', '-lr', type=float, default=1e-3, help='Learning rate')
    parser.add_argument('--lr_policy', type=str, default='lambda', help='Policy of learning rate decay')
    parser.add_argument('--batch_size', '-bs', type=int, default=1, help='Number of batch size')
    parser.add_argument('--beta1', type=float, default=0.5)
    parser.add_argument('--beta2', type=float, default=0.999)
    parser.add_argument('--random_seed', type=int, default=0, help='Random seed used in shuffle operaition')
    parser.add_argument('--no_shuffle', action='store_true', help='Not to shuffle every epoch')
    parser.add_argument('--no_flip', action='store_true', help='Flip images when reading data')
    parser.add_argument('--no_dropout', action='store_true', help='Use dropout in Generator networks')
    parser.add_argument('--save_path', '-s', type=str, default='./checkpoints', help='Training record path')
    parser.add_argument('--print_train_freq', type=int, default=10, help='Frequency of saving training')
    parser.add_argument('--print_image_freq', type=int, default=2000, help='Frequency of saving generated images')
    parser.add_argument('--print_state_freq', type=int, default=200, help='Frequency of printing training states')
    parser.add_argument('--image_pattern', '-p', type=str, default='*.jpg', help='pattern of training images')
    parser.add_argument('--device', type=int, default=0, help='GPU used in training')
    parser.add_argument('--num_threads', type=int, default=0, help='Number of threads when reading data')
    parser.add_argument('--style_size', type=int, default=512)
    parser.add_argument('--content_height', type=int, default=360)
    parser.add_argument('--content_width', type=int, default=640)
    parser.add_argument('--niter', type=int, default=2, help='# of iter at starting learning rate')
    parser.add_argument('--niter_decay', type=int, default=2, help='# of iter to linearly decay learning rate to zero')
    parser.add_argument('--deterministic', action='store_true')
    parser.add_argument('--vgg16', action='store_true', help='If use vgg-16 to compute spatial loss')
    parser.add_argument('--eval', action='store_true', help='Evaluation mode')

    return parser.parse_args()
